"""
Django settings for pegasus project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import socket
from django.core.management.utils import get_random_secret_key

# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', default=get_random_secret_key())

# # Get all machines marked for development and turn on DEBUG for them
# with open('./development_machines.txt', 'r') as dev_machine_file:
#     dev_machines = dev_machine_file.read().split('\n')
#
# dev_machines = [machine.strip() for machine in dev_machines]
#
# DEBUG = socket.gethostname() in dev_machines
#
# if not DEBUG:
#     print("""
# DEBUG is False. If you want to be in development mode,
# make sure you add your device's hostname ({})
# to development_machines.txt
#     """.format(socket.gethostname()))
if os.getenv('PEGASUS_DEBUG', default='TRUE').upper() == 'TRUE':
    DEBUG = True
else:
    DEBUG = False

# Manually enable/disable debug for development
# DEBUG = False
print('DEBUG = {}'.format(DEBUG))

# To keep POST data, we cannot append a trailing slash to post URLs
APPEND_SLASH = False

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'pegasus-pietelite.azurewebsites.net']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'storages',
    'emoji',
    'reels',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pegasus.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pegasus.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ['POSTGRES_DB'],
        'USER': os.environ['POSTGRES_USER'],
        'PASSWORD': os.environ['POSTGRES_PASSWORD'],
        'HOST': 'localhost' if DEBUG else 'db',
        'PORT': 5432,
    },
    # 'mssql': {
    #     'ENGINE': 'sql_server.pyodbc',
    #     'NAME': 'pegasus',
    #     'USER': os.environ['PEGASUS_SQL_USERNAME'],
    #     'PASSWORD': os.environ['PEGASUS_SQL_PASSWORD'],
    #     'HOST': 'tcp:pegasus-pietelite.database.windows.net',
    #     'PORT': 1433,
    #     'AUTOCOMMIT': True,  # Set this true for now so we don't have to do extra commit work
    #
    #     'OPTIONS': {
    #         'driver': 'ODBC Driver 17 for SQL Server',
    #         'connection_timeout': 30,
    #     },
    # },
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# if DEBUG:
#     STATIC_URL = '/static/'
#     STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
# else:
#     STATICFILES_STORAGE = 'reels.azure.blob.AzureStaticStorage'
#     DEFAULT_FILE_STORAGE = 'reels.azure.blob.AzureMediaStorage'
#     STATIC_URL = f'{BLOB_STORAGE_URL}pegasus-static/'
#     MEDIA_URL = '/media/'#f'{BLOB_STORAGE_URL}pegasus-media/'
#     STATIC_ROOT = STATIC_URL

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

if not os.path.exists(STATIC_ROOT):
    os.mkdir(STATIC_ROOT)
if not os.path.exists(MEDIA_ROOT):
    os.mkdir(MEDIA_ROOT)

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Celery Configuration Options
CELERY_TIMEZONE = "America/New_York"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 60 * 60  # Is this 60 minutes?
BROKER_URL = f'amqp://' \
             f'{os.environ["RABBITMQ_DEFAULT_USER"]}:' \
             f'{os.environ["RABBITMQ_DEFAULT_PASS"]}@' \
             f'{"localhost" if DEBUG else "broker"}:' \
             f'5672/' \
             f'{os.environ["RABBITMQ_DEFAULT_VHOST"]}'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
